#!/bin/bash
# Database backup script for MariaDB and PostgreSQL
# Generated by Ansible

set -e

BACKUP_DIR="{{ data_mount_point }}/backups"
DATE=$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS=7

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

echo "Starting database backup at $(date)"

# MariaDB backup
echo "Backing up MariaDB databases..."
mysqldump --user=root --password="{{ mariadb_root_password }}" --all-databases --single-transaction --routines --triggers > "$BACKUP_DIR/mariadb_all_databases_$DATE.sql"

# Individual database backup for appdb
mysqldump --user=root --password="{{ mariadb_root_password }}" --single-transaction --routines --triggers appdb > "$BACKUP_DIR/mariadb_appdb_$DATE.sql"

# PostgreSQL backup
echo "Backing up PostgreSQL databases..."
sudo -u postgres pg_dumpall > "$BACKUP_DIR/postgresql_all_databases_$DATE.sql"

# Individual database backup for appdb
sudo -u postgres pg_dump appdb > "$BACKUP_DIR/postgresql_appdb_$DATE.sql"

# Compress backups
echo "Compressing backup files..."
gzip "$BACKUP_DIR"/*_$DATE.sql

# Remove old backups
echo "Removing backups older than $RETENTION_DAYS days..."
find "$BACKUP_DIR" -name "*.sql.gz" -mtime +$RETENTION_DAYS -delete

# Log backup completion
echo "Database backup completed at $(date)"
echo "Backup files created:"
ls -la "$BACKUP_DIR"/*_$DATE.sql.gz

# Optional: Upload to S3 if AWS CLI is configured
if command -v aws &> /dev/null; then
    echo "Uploading backups to S3..."
    aws s3 cp "$BACKUP_DIR" s3://{{ s3_backup_bucket | default('your-backup-bucket') }}/database-backups/$(date +%Y/%m/%d)/ --recursive --exclude "*" --include "*_$DATE.sql.gz"
fi

echo "Backup process completed successfully."
